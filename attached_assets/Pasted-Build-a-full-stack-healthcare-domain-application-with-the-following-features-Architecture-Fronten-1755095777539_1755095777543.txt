Build a full-stack healthcare domain application with the following features:
Architecture:

Frontend: React + TypeScript + shadcn/ui (Tailwind-based components, CDN build possible) for a professional and visually appealing UI tailored for the healthcare industry.

Backend: Node.js (Express) + MongoDB.

Auth: Multi-role authentication (Admin, Doctor, Normal User). Use JWT-based authentication with secure role-based access control.

Core Features:

Authentication:

Admin, Doctor, and Normal User login/registration.

Admin dashboard for monitoring active sessions (show who is online and last login time).

Admin Document Management:

Admin can upload large reference documents (up to 200 MB) to be used as LLM reference data.

Show upload progress bar, file preview (name, type, size), and status (Indexing, Indexed, Error).

After upload, backend stores document metadata in MongoDB and triggers a background process to index data for RAG (Retrieval-Augmented Generation).

Doctor Document Upload:

Doctor uploads patient or case-related documents.

On upload, call RAG LLM API to process the document using the Admin’s reference data and update the database.

Doctor can view a multi-tab interface where each uploaded document opens in a separate tab showing relevant AI-generated insights, references, and related cases.

Online Monitoring:

Admin dashboard should show real-time online users, role type, and IP/location info.

Implement WebSocket or Socket.IO for live updates.

UI Suggestions (rich healthcare theme):

Clean, clinical color palette (white, light blue, mint green) with modern typography.

Sidebar navigation with icons (Dashboard, Documents, Users, Settings).

Document cards with tags and status badges.

Animated transitions (Framer Motion) for tab changes and modal dialogs.

Charts/Graphs in Admin dashboard for file upload activity, doctor usage stats, and RAG indexing progress.

Profile avatars with role-specific colors (Admin – red, Doctor – blue, User – gray).

Additional Technical Suggestions:

Use GridFS or AWS S3 for storing large files instead of saving directly in MongoDB.

Implement a background job processor (BullMQ/Agenda) for handling heavy RAG indexing without blocking main thread.

Protect sensitive health data with encryption at rest and in transit (HIPAA-compliant if possible).

Add audit logs for all uploads and RAG calls.

Deliverables:

Fully working backend (Express, MongoDB models, role-based auth, file upload API, WebSocket events).

Fully working frontend (React + TS + shadcn/ui + Tailwind, all pages for Admin, Doctor, User with navigation and role-based views).

Sample .env for configuration.

Example mock data for testing UI before backend connection.

Make the generated UI look very cool, modern, and premium with subtle animations, glassmorphism effects, and responsive layouts suitable for desktop and tablet.